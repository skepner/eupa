# -*- Makefile -*-
# Eugene Skepner 2015

MAKEFLAGS = -w

# ----------------------------------------------------------------------
# Variables to be set by user of this Makefile

# default theme for jquery_ui
JQUERY_UI_THEME ?= smoothness

# dir to install antigenic-map-viewer to
export ANTIGENIC_MAP_VIEWER_INSTALL ?= $(EUPA_BUILD)/amv-install

# ----------------------------------------------------------------------

override EUPA_DIST := $(abspath $(EUPA_DIST))
override EUPA_BUILD := $(abspath $(EUPA_BUILD))

EUPA_MAKEFILE := $(abspath $(lastword $(MAKEFILE_LIST)))

SUBMAKE = $(MAKE) EUPA_DIST=$(EUPA_DIST) EUPA_BUILD=$(EUPA_BUILD) EUPA_MAKEFILE=$(EUPA_MAKEFILE)

# ----------------------------------------------------------------------

CURL = curl -sL
AWK = awk
GIT = git

UNAME_S := $(shell uname -s)

# ----------------------------------------------------------------------

EUPA_BIN = $(EUPA_BUILD)/bin
EUPA_LIB = $(EUPA_BUILD)/lib
EUPA_INCLUDE = $(EUPA_BUILD)/include

COFFEE = $(EUPA_BIN)/coffee
COFFEE_RUN = $(COFFEE)
COFFEELINT = $(EUPA_BIN)/coffeelint
LESSC = $(EUPA_BIN)/lessc
LESSC_RUN = $(LESSC) --plugin=less-plugin-clean-css="advanced"
TSC = $(EUPA_BIN)/tsc
TSC_RUN = $(TSC) -m amd --removeComments -t ES5 --noEmitOnError --noImplicitAny
NPM = $(EUPA_BIN)/npm
UGLIFYCSS = $(EUPA_BIN)/uglifycss
UGLIFYJS = $(EUPA_BIN)/uglifyjs

# Note reset PREFIX before running npm (could be set by a program invoking this make)
# otherwise npm uses it
RUN_NPM = /usr/bin/env PREFIX= $(NPM)

# ----------------------------------------------------------------------

eupa_all:
	$(error $(usage))

eupa_clean:
	rm -rf $(EUPA_BUILD) $(EUPA_DIST)

# ----------------------------------------------------------------------

# C++ stuff
axe: $(EUPA_INCLUDE)/axe/axe.h
command-line-arguments: $(EUPA_INCLUDE)/command-line-arguments.hh
cairo: cairo-pkg
jsonhpp: $(EUPA_INCLUDE)/json.hpp

# JS stuff
antigenic-map-viewer: $(EUPA_BUILD)/antigenic-map-viewer/amv-level2.js
coffeelint: $(COFFEELINT)
coffeescript coffee-script: $(COFFEE)
jquery jquery.js: $(EUPA_DIST)/jquery.js $(EUPA_BUILD)/jquery.d.ts $(EUPA_DIST)/jquery.mousewheel.js
jquery-ui jquery-ui.js: $(EUPA_DIST)/jquery-ui.js $(EUPA_BUILD)/jqueryui.d.ts
lessc less: $(LESSC) $(EUPA_LIB)/node_modules/less-plugin-clean-css
md5.js: $(EUPA_DIST)/md5.js
require.js: $(EUPA_DIST)/require.js $(EUPA_BUILD)/require.d.ts $(EUPA_DIST)/css.js $(EUPA_DIST)/json.js $(EUPA_DIST)/text.js
# resizable.js: $(EUPA_DIST)/resizable.js $(EUPA_DIST)/resizable.css
three.js: $(EUPA_DIST)/three.js $(EUPA_BUILD)/three.d.ts
tsc typescript: $(TSC)
uglifycss: $(UGLIFYCSS)
uglifyjs: $(UGLIFYJS)

# ----------------------------------------------------------------------

ifeq ($(shell hostname):$(USER),jagd:eu)
  GIT_URL_PREFIX = git@github.com:
else
  GIT_URL_PREFIX = https://github.com/
endif
GIT_CLONE_PREFIX = $(GIT) clone $(GIT_URL_PREFIX)

# ----------------------------------------------------------------------

 $(EUPA_DIST)/jquery.js: | $(EUPA_DIST)
	@HOST="http://code.jquery.com" &&\
	BASENAME=$$(curl -s "$$HOST" | awk -F 'href=' '/jquery-2.+min/ { split($$NF, a, substr($$NF, 1, 1)); print a[2];}') &&\
	echo downloading $$HOST$$BASENAME &&\
	$(CURL) -o $@ "$$HOST$$BASENAME"
	@head -n 1 $@

$(EUPA_DIST)/jquery.mousewheel.js: | $(EUPA_DIST)
	$(CURL) -o $@ https://github.com/jquery/jquery-mousewheel/raw/master/jquery.mousewheel.min.js
	@grep Mousewheel $@

$(EUPA_DIST)/jquery-ui.js: | $(EUPA_DIST) $(EUPA_BUILD)
	@JQUERY_UI_VERSION=$$($(CURL) http://jqueryui.com/download/ | awk -F '(download/jquery-ui-|\.zip)' 'BEGIN {done=0;} {s=tolower($$0)} s~/href.+stable/ && s!~/beta/{if (!done) {print $$2; done=1;}}') &&\
	  echo Downloading jquery-ui $$JQUERY_UI_VERSION from http://jqueryui.com/resources/download/jquery-ui-$$JQUERY_UI_VERSION.zip &&\
	  $(CURL) -o $(EUPA_BUILD)/jquery-ui.zip http://jqueryui.com/resources/download/jquery-ui-$$JQUERY_UI_VERSION.zip &&\
	  $(CURL) -o $(EUPA_BUILD)/jquery-ui-themes.zip http://jqueryui.com/resources/download/jquery-ui-themes-$$JQUERY_UI_VERSION.zip
	@unzip -p $(EUPA_BUILD)/jquery-ui.zip \*jquery-ui.min.js >$@
	@unzip -p $(EUPA_BUILD)/jquery-ui-themes.zip \*/themes/$(JQUERY_UI_THEME)/jquery-ui.min.css >$(dir $@)jquery-ui.css
	@mkdir -p $(dir $@)/images
	@unzip -q -o -j -d $(dir $@)/images $(EUPA_BUILD)/jquery-ui-themes.zip \*/themes/$(JQUERY_UI_THEME)/images/\*

$(EUPA_DIST)/require.js: | $(EUPA_DIST)
	$(CURL) -o $@ $$($(CURL) http://requirejs.org/docs/download.html | awk -F '(href="|")' '/href=.+\/minified/ { print $$(NF-1); }')

$(EUPA_DIST)/css.js: | $(EUPA_DIST)
	$(CURL) -o $@ https://raw.github.com/dimaxweb/CSSLoader/master/dist/css.js

$(EUPA_DIST)/json.js: | $(EUPA_DIST) $(UGLIFYJS)
	$(call uglify_js,https://github.com/millermedeiros/requirejs-plugins/raw/master/src/json.js)

$(EUPA_DIST)/text.js: | $(EUPA_DIST) $(UGLIFYJS)
	$(call uglify_js,https://github.com/millermedeiros/requirejs-plugins/raw/master/lib/text.js)

$(EUPA_DIST)/three.js: | $(EUPA_DIST)
	@LATEST=$$(curl -s -D - https://github.com/mrdoob/three.js/releases/latest | awk -F '[/\r]' '/^Location:/ {printf $$(NF-1);}') &&\
	URL=https://cdnjs.cloudflare.com/ajax/libs/three.js/$$LATEST/three.min.js &&\
	echo $$URL &&\
	$(CURL) -o $@ $$URL

# $(EUPA_DIST)/resizable.js: | $(EUPA_DIST) $(UGLIFYJS)
#	$(call uglify_js,https://github.com/tannernetwork/resizable/raw/master/resizable.js)

# $(EUPA_DIST)/resizable.css: | $(EUPA_DIST) $(UGLIFYCSS)
#	$(call uglify_css,https://github.com/tannernetwork/resizable/raw/master/resizable.css)

$(EUPA_DIST)/md5.js: | $(EUPA_DIST) $(UGLIFYJS)
	$(call uglify_js,https://github.com/emn178/js-md5/raw/master/src/md5.js)

# ----------------------------------------------------------------------

$(EUPA_BUILD)/antigenic-map-viewer/amv-level2.js: | $(EUPA_BUILD)
	AMV_BUILD=$(EUPA_BUILD)/antigenic-map-viewer &&\
	if [ -d "$$AMV_BUILD" ]; then (cd "$$AMV_BUILD" && git pull); else git clone https://github.com/acorg/antigenic-map-viewer.git "$$AMV_BUILD"; fi &&\
	$(SUBMAKE) -C "$$AMV_BUILD" install

#$(EUPA_BUILD)/antigenic-map-viewer/amv-level2.js: | $(EUPA_BUILD)
#	$(warning AMV via rsync)
#	rsync -a --exclude .git --exclude build --exclude dist --exclude eupa ~/ac/antigenic-map-viewer $(EUPA_BUILD)
#	$(SUBMAKE) -C $(EUPA_BUILD)/antigenic-map-viewer install

# ----------------------------------------------------------------------

$(EUPA_INCLUDE)/axe/axe.h: | $(EUPA_BUILD) $(EUPA_INCLUDE)
	if [ -d $(EUPA_BUILD)/axe ]; then cd $(EUPA_BUILD)/axe; git pull; else $(GIT_CLONE_PREFIX)skepner/axe $(EUPA_BUILD)/axe; fi
	ln -s ../axe/include $(EUPA_INCLUDE)/axe

$(EUPA_INCLUDE)/command-line-arguments.hh: | $(EUPA_BUILD) $(EUPA_INCLUDE)
	if [ -d $(EUPA_BUILD)/command-line-arguments ]; then cd $(EUPA_BUILD)/command-line-arguments; git pull; else $(GIT_CLONE_PREFIX)skepner/command-line-arguments $(EUPA_BUILD)/command-line-arguments; fi
	ln -s ../command-line-arguments/command-line-arguments.hh $(EUPA_INCLUDE)

cairo-pkg:
	@if ! pkg-config cairo; then \
	  echo "ERROR: cairo not installed" >&2; \
	  if [ "$(UNAME_S)" == "Darwin" ]; then \
	    echo "Use \"brew install cairo\" to install." >&2; \
	  elif [ "$(UNAME_S)" == "Linux" ]; then \
	    echo "Use \"sudo apt-get install libcairo-dev\" to install." >&2; \
	  fi; \
	  exit 1; \
	fi

# $(EUPA_LIB)/libcairo.dylib: | $(EUPA_LIB)/libpixman-1.dylib $(EUPA_BUILD) $(EUPA_LIB)
#	URL="http://www.cairographics.org/releases/cairo-$$(curl -s -L http://www.cairographics.org/releases/ | /usr/bin/awk -F / '/LATEST-cairo-/ { p = match($$0, /LATEST-cairo-[^\"]+/); print substr($$0, RSTART + 13, RLENGTH - 13); }').tar.xz" &&\
#	cd $(EUPA_BUILD) &&\
#	$(CURL) -o cairo.tar.xz "$$URL" &&\
#	PDIR=$$(tar tJf cairo.tar.xz | head -n 1) &&\
#	tar -xJf cairo.tar.xz &&\
#	cd "$$PDIR" &&\
#	$(ENV_PKG_CONFIG_PATH) ./configure --prefix $(EUPA_BUILD) --enable-png=yes --enable-pdf=yes --enable-xlib=no --enable-qt=no --enable-quartz=no --enable-win32=no --enable-svg=yes --enable-trace=no --enable-interpreter=no --enable-fc=no --enable-ft=no --enable-gobject=no &&\
#	/usr/bin/make -j8 &&\
#	/usr/bin/make install

# $(EUPA_LIB)/libpixman-1.dylib: | $(EUPA_BUILD) $(EUPA_LIB)
#	URL="http://cgit.freedesktop.org/pixman/snapshot/pixman-0.33.6.tar.xz" &&\
#	cd $(EUPA_BUILD) &&\
#	$(CURL) -o pixman.tar.xz "$$URL" &&\
#	PDIR=$$(tar tJf pixman.tar.xz | head -n 1) &&\
#	tar -xJf pixman.tar.xz &&\
#	cd "$$PDIR" &&\
#	./autogen.sh --prefix $(EUPA_BUILD) --disable-static &&\
#	/usr/bin/make -j8 &&\
#	/usr/bin/make install

$(EUPA_INCLUDE)/json.hpp: | $(EUPA_BUILD) $(EUPA_INCLUDE)
	$(CURL) -o $@ https://github.com/open-source-parsers/json/raw/master/src/json.hpp

# ----------------------------------------------------------------------

$(EUPA_BUILD)/%.d.ts: | $(EUPA_BUILD)
	$(CURL) -sL -o $@ https://github.com/DefinitelyTyped/DefinitelyTyped/raw/master/$*/index.d.ts

$(EUPA_BUILD)/jqueryui.d.ts: | $(EUPA_BUILD)
	$(CURL) -o $@.tmp https://github.com/DefinitelyTyped/DefinitelyTyped/raw/master/jqueryui/index.d.ts
	@#/usr/bin/awk -v RS="" '{ gsub( "\\.\\./jquery/jquery\\.d\\.ts", "jquery.d.ts"); print; }' $@.tmp >$@ && rm $@.tmp
	/usr/bin/awk -v RS="" '{ gsub( "\"jquery\"", "\"jquery.d.ts\""); print; }' $@.tmp >$@ && rm $@.tmp

$(EUPA_BUILD)/require.d.ts: | $(EUPA_BUILD)
	$(CURL) -o $@ https://github.com/DefinitelyTyped/DefinitelyTyped/raw/master/requirejs/index.d.ts

$(EUPA_BUILD)/three.d.ts: | $(EUPA_BUILD)
	$(CURL) -o $@.tmp https://github.com/DefinitelyTyped/DefinitelyTyped/raw/master/three/index.d.ts
	@#/usr/bin/awk 'BEGIN {RS="";} { gsub( "///<reference path", "/// reference path"); gsub(/export class Audio(Listener)?[^}]+}/, "/* & */"); print; }' $(BUILD)/typings/threejs/three.d.ts >$@
	grep -v three-vr $@.tmp >$@
	cd $(EUPA_BUILD) && for ref_file in $$(/usr/bin/awk 'BEGIN {FS="\"";} /reference path=/ { print $$2; }' three.d.ts); do echo $$ref_file; $(CURL) -O https://github.com/DefinitelyTyped/DefinitelyTyped/raw/master/three/$$ref_file; done

# ----------------------------------------------------------------------

NPM_FIX_OUTPUT = grep -vE '[└├│\[]'

$(COFFEE): | $(NPM)
	$(RUN_NPM) install -g coffee-script 2>&1 | $(NPM_FIX_OUTPUT)

$(COFFEELINT): | $(NPM)
	$(RUN_NPM) install -g coffeelint 2>&1 | $(NPM_FIX_OUTPUT)

$(LESSC): | $(NPM)
	$(RUN_NPM) install -g less 2>&1 | $(NPM_FIX_OUTPUT)

$(TSC): | $(NPM)
	$(RUN_NPM) install -g typescript 2>&1 | $(NPM_FIX_OUTPUT)

$(EUPA_LIB)/node_modules/less-plugin-clean-css: | $(NPM)
	$(RUN_NPM) install -g less-plugin-clean-css 2>&1 | $(NPM_FIX_OUTPUT)

$(UGLIFYCSS): | $(NPM)
	$(RUN_NPM) install -g uglifycss 2>&1 | $(NPM_FIX_OUTPUT)

$(UGLIFYJS): | $(NPM)
	$(RUN_NPM) install -g uglifyjs 2>&1 | $(NPM_FIX_OUTPUT)

# ----------------------------------------------------------------------

ifeq ($(UNAME_S),Darwin)
  NODE_ARCHIVE_INFIX = darwin-x64.tar.xz
else ifeq ($(UNAME_S),Linux)
  NODE_ARCHIVE_INFIX = linux-x64.tar.xz
else
  $(error Unsupported platform $(UNAME_S))
endif
NODE_URL = https://nodejs.org/dist/latest-v4.x/
NODE_EXTRACT_DIR = $(EUPA_BUILD)/node

$(EUPA_BIN)/node $(NPM): | $(EUPA_BUILD) $(EUPA_BIN) $(EUPA_LIB)
	rm -rf $(NODE_EXTRACT_DIR)
	mkdir -p $(NODE_EXTRACT_DIR)
	N=$$($(CURL) $(NODE_URL) | awk -F '(href="|")' '/$(NODE_ARCHIVE_INFIX)/ { print $$(NF-1); }') && $(CURL) -o $(NODE_EXTRACT_DIR)/$$(basename $$N) $(NODE_URL)$$N && tar -C $(NODE_EXTRACT_DIR) -xf $(NODE_EXTRACT_DIR)/$$(basename $$N)
	rsync -a $(NODE_EXTRACT_DIR)/node-*/bin $(EUPA_BUILD)
	rsync -a $(NODE_EXTRACT_DIR)/node-*/lib $(EUPA_BUILD)

# ----------------------------------------------------------------------

$(EUPA_BUILD):
	$(call make_target_dir,$(EUPA_BUILD),EUPA_BUILD)

$(EUPA_BIN): $(EUPA_BUILD)
	$(call make_target_dir,$(EUPA_BIN),EUPA_BIN)

$(EUPA_LIB): $(EUPA_BUILD)
	$(call make_target_dir,$(EUPA_LIB),EUPA_LIB)

$(EUPA_INCLUDE): $(EUPA_BUILD)
	$(call make_target_dir,$(EUPA_INCLUDE),EUPA_INCLUDE)

$(EUPA_DIST):
	$(call make_target_dir,$(EUPA_DIST),EUPA_DIST)

# ----------------------------------------------------------------------

# UGLIFY_JS_URL = https://marijnhaverbeke.nl/uglifyjs

# define uglify
#   @echo $(1)
#   @$(CURL) -o $@ $(UGLIFY_JS_URL)?code_url=$(1)
# endef

define uglify_css
  $(CURL) -o $@.tmp $(1)
  $(UGLIFYCSS) --ugly-comments $@.tmp >$@
  rm $@.tmp
endef

define uglify_js
  $(CURL) $(1) | $(UGLIFYJS) --screw-ie8 -c -o $@
endef

define make_target_dir
  @if [ -z "$(1)" ]; then echo $(2) is not set >&2; exit 1; fi
  @if [ ! -d $(1) ]; then mkdir -p $(1); fi
endef

# ----------------------------------------------------------------------

define usage

Usage: make [variable-assignments] target
Variables:
  EUPA_DIST - installation directly for .js files
  EUPA_BUILD - installation directory for packages, i.e. having bin/, lib/ etc., d.ts files
  JQUERY_UI_THEME - default: smoothness
endef

define notset

ERROR: Either EUPA_DIST or EUPA_BUILD not set:
  EUPA_DIST=$(EUPA_DIST)
  EUPA_BUILD=$(EUPA_BUILD)
$(usage)
endef

ifeq ($(and $(EUPA_DIST),$(EUPA_BUILD)),)
  $(error $(notset))
endif
